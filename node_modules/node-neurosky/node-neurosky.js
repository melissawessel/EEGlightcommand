var net = require('net'),
  events = require('events'),
  util = require('util');

function NodeThinkGearError(message) {
  Error.call(this);
  Error.captureStackTrace(this, arguments.callee);
  this.message = message;
  this.name = 'NodeThinkGearError';
};

NodeThinkGearError.prototype.__proto__ = Error.prototype;

var ThinkGearClient = function(opts) {
  opts || (opts = {});

  this.port = opts.port || 13854;
  this.host = opts.host || 'localhost';

  if (typeof(opts.appName) !== 'string') throw new NodeThinkGearError('Must specify appName');
  if (typeof(opts.appKey) !== 'string') throw new NodeThinkGearError('Must specify appKey');

  this.auth = {
    appName: opts.appName,
    appKey: opts.appKey
  };

  this.config = {
    enableRawOutput: false,
    format: "Json"
  };

  events.EventEmitter.call(this);
};

util.inherits(ThinkGearClient, events.EventEmitter);

ThinkGearClient.prototype.connect = function(onSuccess, onError) {
  var self = this;

  var client = this.client = net.connect(this.port, this.host, function() {
    client.write(JSON.stringify(self.auth));
		console.log(self.auth);
    if (onSuccess && typeof(onSuccess) === "function") {
      onSuccess();
      console.log(this);
    }
  });

  client.on('data', function(data) {
    console.log('library got data')
    if (!self.configSent) {
      self.configSent = true;
      client.write(JSON.stringify(self.config));
    } else {
      try {
        self.emit('data', JSON.parse(data.toString()));
      } catch (e) {
        self.emit('parse_error', data.toString());
      }
    }
  });

  client.on('connect', function() {
	console.log('connected yay');
  });

	client.on('finish', function() {
		console.log('finished omg!');
	})


};

exports.ThinkGearClient = ThinkGearClient;

exports.createClient = function(opts) {
  return new ThinkGearClient(opts || {});
};
